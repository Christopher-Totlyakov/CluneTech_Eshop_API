// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20250808175527_seedData")]
    partial class seedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the account.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Hashed password used for secure login.");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Username for login.");

                    b.HasKey("Id");

                    b.ToTable("Accounts", t =>
                        {
                            t.HasComment("Represents a user account used for authentication.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            PasswordHash = "123",
                            Username = "john"
                        },
                        new
                        {
                            Id = 2L,
                            PasswordHash = "456",
                            Username = "jane"
                        });
                });

            modelBuilder.Entity("Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the address.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("City where the address is located.");

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasComment("Foreign key referencing the client.");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasComment("Foreign key referencing the country.");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasComment("Indicates whether this is the client's main address.");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Street number or apartment number.");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Street name of the address.");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses", t =>
                        {
                            t.HasComment("Represents a physical address associated with a client.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Sofia",
                            ClientId = 1L,
                            CountryId = 1L,
                            IsMain = true,
                            Number = "12",
                            Street = "Vitosha"
                        },
                        new
                        {
                            Id = 2L,
                            City = "New York",
                            ClientId = 2L,
                            CountryId = 2L,
                            IsMain = true,
                            Number = "101",
                            Street = "Broadway"
                        });
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the client.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint")
                        .HasComment("Foreign key referencing the related account.");

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Client's age.");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Client's first name.");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Client's last name.");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Client's gender (e.g., Male, Female, Other).");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Clients", t =>
                        {
                            t.HasComment("Represents a client who can place orders.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            Age = 30,
                            FirstName = "John",
                            LastName = "Doe",
                            Sex = "Male"
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 2L,
                            Age = 28,
                            FirstName = "Jane",
                            LastName = "Smith",
                            Sex = "Female"
                        });
                });

            modelBuilder.Entity("Entities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the country.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Iso2")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasComment("2-letter ISO code.");

                    b.Property<string>("Iso3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasComment("3-letter ISO code.");

                    b.Property<string>("IsoName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Official ISO name of the country.");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("International phone code");

                    b.HasKey("Id");

                    b.ToTable("Countries", t =>
                        {
                            t.HasComment("Represents a country, including ISO codes and phone code.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Iso2 = "BG",
                            Iso3 = "BGR",
                            IsoName = "Bulgaria",
                            PhoneCode = "+359"
                        },
                        new
                        {
                            Id = 2L,
                            Iso2 = "US",
                            Iso3 = "USA",
                            IsoName = "United States",
                            PhoneCode = "+1"
                        });
                });

            modelBuilder.Entity("Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the product.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the product.");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Price of the product in the applicable currency.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Type or category of the product.");

                    b.HasKey("Id");

                    b.ToTable("Products", t =>
                        {
                            t.HasComment("Represents a product available for sale.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Lion King",
                            Price = 25.00m,
                            Type = "Book"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Gladiator 2",
                            Price = 30.50m,
                            Type = "Movie"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "God Of War: Ragnarok",
                            Price = 69.90m,
                            Type = "PS5 Game"
                        });
                });

            modelBuilder.Entity("Entities.Sale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Primary key of the sale.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the order was placed.");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("float")
                        .HasComment("Quantity of the product sold.");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sales", t =>
                        {
                            t.HasComment("Represents a product sale made by a client.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ClientId = 1L,
                            OrderDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1L,
                            Quantity = 2.0
                        },
                        new
                        {
                            Id = 2L,
                            ClientId = 2L,
                            OrderDate = new DateTime(2023, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3L,
                            Quantity = 1.0
                        });
                });

            modelBuilder.Entity("Entities.Address", b =>
                {
                    b.HasOne("Entities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.HasOne("Entities.Account", "Account")
                        .WithOne("Client")
                        .HasForeignKey("Entities.Client", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Entities.Sale", b =>
                {
                    b.HasOne("Entities.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Account", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Sales");
                });
#pragma warning restore 612, 618
        }
    }
}
